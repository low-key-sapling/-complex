server:
  port: 8888
spring:
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/complex?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.alibaba.druid.pool.DruidDataSource
    #Spring Boot 默认是不注入这些属性值的，需要自己绑定
    #druid 数据源专有配置
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙，此处是filter修改的地方
      filter:
        commons-log:
          connection-logger-name: stat,wall,log4j
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
  data:
    elasticsearch:
      repositories:
        enabled: true
  elasticsearch:
    uris: 127.0.0.1:9200
  kafka:
    bootstrap-servers: 192.168.85.130:9092,192.168.85.131:9092,192.168.85.132:9092
    producer: # producer 生产者
      retries: 0 # 重试次数
      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384 # 批量大小
      buffer-memory: 33554432 # 生产端缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # value-serializer: com.itheima.demo.config.MySerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer: # consumer消费者
      group-id: java-group # 默认的消费组ID
      enable-auto-commit: true # 是否自动提交offset
      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)
      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # value-deserializer: com.itheima.demo.config.MyDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #######spring boot 安全认证 配置#######
  security:
    user:
      name: admin
      password: admin
#######Mybatis 配置#######
mybatis:
  mapper-locations: classpath:mapper/*Mapper.xml
#######logback 日志配置#######
logging:
  config: classpath:log/logback-spring.xml
  file:
    path: /var/log/complex
    name: complex.log
#######actuator 配置#######
management:
  endpoints:
    web:
      exposure:
        # 打开所有的监控点
        include: "*"
        # 排除端点
        exclude: shutdown
      # 自定义监控路径 monitor
      # 默认值：http://localhost:8016/actuator/*
      # 配置后：http://localhost:8016/monitor/*
      base-path: /monitor
  endpoint:
    health:
      show-details: ALWAYS
    shutdown:
      # 通过指定接口关闭 SpringBoot #默认情况下，除shutdown以外的所有端点均已启用。手动开启
      enabled: true
  # 可以自定义端口
  server:
    port: 8889
# 描述项目基础信息
info:
  app:
    name: lowkey-complex-actuator
    port: 8888
    version: 1.0.0
    author: lowkey